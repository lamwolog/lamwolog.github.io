# 线程run和start的区别

#### start() :

它的作用是启动一个新线程。
 通过start()方法来启动的新线程，处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行相应线程的run()方法，这里方法run()称为线程体，它包含了要执行的这个线程的内容，run方法运行结束，此线程随即终止。start()不能被重复调用。用start方法来启动线程，真正实现了多线程运行，即无需等待某个线程的run方法体代码执行完毕就直接继续执行下面的代码。这里无需等待run方法执行完毕，即可继续执行下面的代码，即进行了线程切换。

#### run()   :

run()就和普通的成员方法一样，可以被重复调用。
 如果直接调用run方法，并不会启动新线程！程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到多线程的目的。
 总结：调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。



```csharp
public class Test {
    static void pong(){
        System.out.print("pong");
    }
    public static void main(String[] args) {
        Thread t=new Thread(){
            public void run(){
                pong();
            }
        };
        t.run();
        System.out.print("ping");       
    }
}
运行结果：
pongping
```

总结一下：

1. start() 可以启动一个新线程，run()不能
2. start()不能被重复调用，run()可以
3. start()中的run代码可以不执行完就继续执行下面的代码，即进行了线程切换。直接调用run方法必须等待其代码全部执行完才能继续执行下面的代码。
4. start() 实现了多线程，run()没有实现多线程。



作者：snoweek
链接：https://www.jianshu.com/p/9baa7baf233d
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
