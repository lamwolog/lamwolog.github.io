

# 反射调用

## 反射调用私有构造函数

```java
import java.lang.reflect.Constructor;
	import java.lang.reflect.InvocationTargetException;
	import java.lang.reflect.Method;

​	public class Test {
​    	public static void main(String[] args) throws Exception {
​        	//get Constructor
​        	Class clazz = Class.forName("T");
​        	Constructor cons = clazz.getDeclaredConstructor(null);
​        	//set accessble to access private constructor
​        	cons.setAccessible(true);
​        	cons.newInstance(null);
​    	}

​	}

​	class T {
​    	private T() {
​        	System.out.println("init T");
​    	}
​	}
```



## 反射调用内部类

例子：  

```java
public class OuterClass {
    public void print(){
        System.out.println("i am Outer class");
    }
     class InnerClass{
         void print2(){
            System.out.println("i am inner class");
        }
    }
}
```

1、默认调用

```java
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * Created by garfield on 2016/11/18.
 */
public class TestClass {
    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
        Class c = Class.forName("com.newland.sri.utep.OuterClass");
        //通过方法名获取方法
        Method method = c.getDeclaredMethod("print");
        //调用外部类方法
        method.invoke(c.newInstance());
        //内部类需要使用$分隔
        Class c2 = Class.forName("com.newland.sri.utep.OuterClass$InnerClass");
        Method method2 = c2.getDeclaredMethod("print2");
        //通过构造函数创建实例,如果没有重写构造方法则不管是不是获取已声明构造方法,结果是一样的
        method2.invoke(c2.getDeclaredConstructors()[0].newInstance(c.newInstance()));
    }
}
```

> 这里的newInstance可以不要加参数，写成`c2.getDeclaredConstructors()[0].newInstance()`

2、如果构造函数被重写了，因为获取的实例不一样，需要带上参数

```java
/**
 * Created by garfield on 2016/11/18.S
 */
public class OuterClass {
    public void print(){
        System.out.println("i am Outer class");
    }
     class InnerClass{
         InnerClass(String a){
             
         }
         void print2(){
            System.out.println("i am inner class");
        }
    }
}
```

```java
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * Created by garfield on 2016/11/18.
 */
public class TestClass {
    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {
        Class c = Class.forName("com.newland.sri.utep.OuterClass");
        //通过方法名获取方法
        Method method = c.getDeclaredMethod("print");
        //调用外部类方法
        method.invoke(c.newInstance());
        //内部类需要使用$分隔
        Class c2 = Class.forName("com.newland.sri.utep.OuterClass$InnerClass");
        Method method2 = c2.getDeclaredMethod("print2");
        //这时候不能用c2.getConstructors(),已经不存在未声明的构造方法,所以这样写是错的
        method2.invoke(c2.getDeclaredConstructors()[0].newInstance(c.newInstance(),"a"));
    }
}
```











